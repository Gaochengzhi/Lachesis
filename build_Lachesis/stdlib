;       _      _   _ _ _                          
;   ___| |_ __| | | (_) |__  _ __ __ _ _ __ _   _ 
;  / __| __/ _` | | | | '_ \| '__/ _` | '__| | | |
;  \__ \ || (_| | | | | |_) | | | (_| | |  | |_| |
;  |___/\__\__,_| |_|_|_.__/|_|  \__,_|_|   \__, |
;                                           |___/ 

; function suport
[def {func} [\ {__func_name __body} {
    def [head __func_name] [\ [tail __func_name] __body] 
    }]]



; <stdbool>
[def {nil} {}]
[def {true} 1]
[def {false} 0]
[func {not __x} {- 1 __x}]
[func {or __x __y} {+ __x __y}]
[func {and __x __y} {* __y __x}]

; <stdlist>
[func {first __lexpr} {eval [head __lexpr]}]
[func {len __lexpr}{
    if [== __lexpr nil]
        {0}
        {+ 1 [len [tail __lexpr]]}
        }]
[func {last __list} {
    at [- [len __list] 1] __list
    }]
[func {at __n __list} {
    if [==  __n 0]
        {first __list}
        {at [- __n 1] [tail __list]}
        }]
[func {iselem __x __list} {
    if [== __list nil]
        {false}
        {if [== __x __list]
            {true}
            {iselem __x [tail __list]}
            }
    }]

; sequential order
[func {do & __list} {
    if[== __list nil]
        {nil}
        {last __list}
        }]

;namespace
[func {namespace __name} {
    [[\ {_placeholder} __name] [ ]]
    }]


; curry and uncurry
[func {unpack __func __lexpr} {
    eval [join [__list __func] __lexpr]
    }]
[func {pack __f & __xs} {__f __xs}]
[def {curry} unpack]
[def {uncurry} pack]

;map
[func {map __operation __list} {
    if[== __list nil]
        {nil}
        {join 
            [list [__operation [first __list]]] 
            [map __operation [tail __list]]}
    }]
[func {filter __fil __list} {
    if [== __list nil]
        {nil}
        {join [if [__fil [first __list]] 
                {head __list}
                {nil}]
              [filter __fil [tail __list]]}
    }]

[func {join_eval & xs} {eval xs}]


; std math

[def {MATH_E} `2.718`]
[def {MATH_LN2} `0.693`]
[def {MATH_LN10} `2.303`]
[def {MATH_LOG2} `1.443`]
[def {MATH_LOG10} `0.434`]
[def {MATH_PI} `3.141`]
[def {MATH_SQRT2} `1.414`]

; function 

[func {abs __num} {
      if [> __num 0]
        {__num}
        {- __num}
      }]

[func {cube __num} {* __num __num __num}]
[func {square __num} {* __num __num}]

[func {range_sum __low __high} {
    if [> __low __high]
        {0}
        {+ __low [range_sum [+ __low 1] __high]}
    }]

[func {exp __base __n} {
    if [== __n 0]
        {1}
        {* __base [exp __base [- __n 1]]}
    }]


[func {sum_square __base __n} {
    if [== __n 0]
        {1}
        {+ __base [sum_square __base [- __n 1]]}
    }]


[func {sum_cube __base __n} {
    if [== __n 0]
        {1}
        {+ __base [sum_cube __base [- __n 1]]}
    }]


[func {fib __n} {
    if [== __n 0] 
        {0}
        {if [== __n 1] 
            {1}
            {+ 
            [fib [- __n 1]]
            [fib [- __n 2]]
            }
        } 
    }]

; check if it is ok to run
[print "standard libarary loaded!\n"]
